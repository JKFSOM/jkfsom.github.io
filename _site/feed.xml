<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2023-09-18T16:46:39+01:00</updated><id>/feed.xml</id><title type="html">JFKSOM</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Collecting Validation Errors in FastAPI/Pydantic</title><link href="/fastapi/pydantic/2023/09/18/collecting-errors-with-fastapi.html" rel="alternate" type="text/html" title="Collecting Validation Errors in FastAPI/Pydantic" /><published>2023-09-18T13:00:00+01:00</published><updated>2023-09-18T13:00:00+01:00</updated><id>/fastapi/pydantic/2023/09/18/collecting-errors-with-fastapi</id><content type="html" xml:base="/fastapi/pydantic/2023/09/18/collecting-errors-with-fastapi.html">&lt;p&gt;FastAPI has become a popular choice for building APIs, largely due to its foundational architecture atop the &lt;a href=&quot;https://www.starlette.io/&quot;&gt;Starlette framework&lt;/a&gt; and &lt;a href=&quot;https://github.com/pydantic/pydantic&quot;&gt;Pydantic library&lt;/a&gt;. While it provides impressive speed and an array of features, one of its standout functionalities is robust request validation using Pydantic.&lt;/p&gt;

&lt;p&gt;However, sometimes the out-of-the-box validation mechanisms aren’t enough to cover more complex requirements, such as conditional validation. Fortunately, FastAPI provides powerful tools for extending these capabilities, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Field&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Model&lt;/code&gt; validators.&lt;/p&gt;

&lt;p&gt;Although FastAPI’s built in (Pydantic) validation is enough in most cases, occassionally additional validation is required - for example, when dealing conditional validation. Fortunately, this can be achieved using &lt;a href=&quot;https://docs.pydantic.dev/latest/usage/validators/#field-validators&quot;&gt;Field&lt;/a&gt; and &lt;a href=&quot;https://docs.pydantic.dev/latest/usage/validators/#model-validators&quot;&gt;Model validators&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, the default behaviour of FastAPI (Pydantic) in a custom validator is to surface an exception immediately after encountering it. When building a backend for a web service, etc., it can be useful to collect all errors before returning to the user. To validate everything before returning we can utilise a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;model_validator&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mode='wrap'&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;validation_error.from_exception_data()&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;
&lt;p&gt;Obvious improvement can be made to the following code - the use of enums for height-type, for example. However, this is a bare-bones example of how to collect and return validation errors in one go.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/JKFSOM/f694e5dcd1081eada511d456c75f312f.js&quot;&gt;&lt;/script&gt;</content><author><name></name></author><category term="fastapi" /><category term="pydantic" /><summary type="html">FastAPI has become a popular choice for building APIs, largely due to its foundational architecture atop the Starlette framework and Pydantic library. While it provides impressive speed and an array of features, one of its standout functionalities is robust request validation using Pydantic.</summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="/jekyll/update/2022/12/18/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2022-12-18T16:57:35+00:00</published><updated>2022-12-18T16:57:35+00:00</updated><id>/jekyll/update/2022/12/18/welcome-to-jekyll</id><content type="html" xml:base="/jekyll/update/2022/12/18/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry></feed>